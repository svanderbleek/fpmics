domains Element, Set

declare in: [Element Set] -> Boolean

datatype N := Z | (S N)

domain (Set' S)

define (commute-and p) :=
  (!both (!right-and p) (!left-and p))

declare A, B: Boolean

assert q := (A & B)

(!commute-and q)

define (get-conjuncts' p) :=
  match p {
    (a & b) => (join (get-conjuncts' a) (get-conjuncts' b))
  | _ => [p]
  }