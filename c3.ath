set-flag print-var-sorts "off"

datatype N := Z | (S N)

declare Plus: [N N] -> N [+]

set-precedence S 350

assert right-zero := (forall x . x + Z = x)
assert right-nonzero := (forall x y . x + S y = S (x + y))

conclude ((S Z + Z) = S Z) (!instance right-zero (S Z))

conclude
  ((S S Z + S S Z) = S S S S Z)
  (!chain [
    (S S Z + S S Z)
    = (S (S S Z + S Z)) [right-nonzero]
    = (S S (S S Z + Z)) [right-nonzero]
    = (S S S S Z) [right-zero]
  ])

conclude
  (x = y ==> y = x)
  assume (x = y)
  (!sym (x = y))

conclude
  (x = y & y = z ==> x = z)
  assume (x = y & y = z)
  (!tran (x = y) (y = z))

declare a, b, c, d: N
declare f: [N N] -> N

conclude
  (a = b & c = d ==> (f a c) = (f b d))
  assume (a = b & c = d)
  (!fcong ((f a c) = (f b d)))

declare R: [N N] -> Boolean

conclude
  (a = b & c = d & a R c ==> b R d)
  assume (a = b & c = d & a R c)
  (!rcong (a R c) (b R d))

declare g: [N N] -> N
declare h: [N] -> N
declare i: [N N] -> N

assert p31 :=
  (= (i (S Z) Z)
     (S (i Z Z)))

define g31 :=
  (= (h (g Z (i (S Z) (i (S Z) Z))))
     (h (g Z (i (S Z) (S (i Z Z))))))

define p31i := (make-term (root p31) (map (lambda (t) (i (S Z) t)) (children p31)))
define p31g := (make-term (root p31i) (map (lambda (t) (g Z t)) (children p31i)))
define p31h := (make-term (root p31g) (map (lambda (t) (h  t)) (children p31g)))

conclude g31 {
  (!fcong p31i);
  (!fcong p31g);
  (!fcong p31h)
}